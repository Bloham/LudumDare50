[gd_resource type="ShaderMaterial" load_steps=13 format=2]

[ext_resource path="res://noisetexture.tres" type="Texture" id=1]

[sub_resource type="VisualShaderNodeScalarOp" id=2]
default_input_values = [ 0, 0.0, 1, 0.05 ]
operator = 1

[sub_resource type="VisualShaderNodeVectorOp" id=5]
output_port_for_preview = 0
operator = 2

[sub_resource type="VisualShaderNodeColorConstant" id=6]
constant = Color( 0.588235, 1, 0.862745, 1 )

[sub_resource type="VisualShaderNodeScalarUniform" id=19]
uniform_name = "ScalarInput"

[sub_resource type="VisualShaderNodeInput" id=7]
output_port_for_preview = 0
input_name = "uv"

[sub_resource type="VisualShaderNodeTextureUniform" id=20]
uniform_name = "TextureUniform"

[sub_resource type="VisualShaderNodeScalarFunc" id=9]
function = 0

[sub_resource type="VisualShaderNodeScalarOp" id=10]
default_input_values = [ 0, 0.0, 1, 2.0 ]
operator = 3

[sub_resource type="VisualShaderNodeTexture" id=11]
texture = ExtResource( 1 )

[sub_resource type="VisualShaderNodeScalarOp" id=12]
operator = 1

[sub_resource type="VisualShader" id=14]
code = "shader_type spatial;
render_mode depth_draw_alpha_prepass, cull_disabled, specular_schlick_ggx;

uniform sampler2D TextureUniform;
uniform sampler2D tex_frg_7;
uniform float ScalarInput;



void vertex() {
// Output:0

}

void fragment() {
// TextureUniform:21
	vec3 n_out21p0;
	float n_out21p1;
	{
		vec4 n_tex_read = texture(TextureUniform, UV.xy);
		n_out21p0 = n_tex_read.rgb;
		n_out21p1 = n_tex_read.a;
	}

// Input:2
	vec3 n_out2p0 = vec3(UV, 0.0);

// Texture:7
	vec4 tex_frg_7_read = texture(tex_frg_7, n_out2p0.xy);
	vec3 n_out7p0 = tex_frg_7_read.rgb;
	float n_out7p1 = tex_frg_7_read.a;

// ScalarUniform:19
	float n_out19p0 = ScalarInput;

// ScalarFunc:4
	float n_out4p0 = sin(n_out19p0);

// ScalarOp:5
	float n_in5p1 = 2.00000;
	float n_out5p0 = n_out4p0 / n_in5p1;

// ScalarOp:8
	float n_out8p0 = dot(n_out7p0, vec3(0.333333, 0.333333, 0.333333)) - n_out5p0;

// ScalarOp:10
	float n_in10p1 = 0.05000;
	float n_out10p0 = n_out8p0 - n_in10p1;

// Color:14
	vec3 n_out14p0 = vec3(0.588235, 1.000000, 0.862745);
	float n_out14p1 = 1.000000;

// VectorOp:13
	vec3 n_out13p0 = vec3(n_out10p0) * n_out14p0;

// Output:0
	ALBEDO = n_out21p0;
	EMISSION = n_out13p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -334.929, 29.3466 )
modes/cull = 2
modes/depth_draw = 3
nodes/fragment/0/position = Vector2( 1100, 180 )
nodes/fragment/2/node = SubResource( 7 )
nodes/fragment/2/position = Vector2( 0, 220 )
nodes/fragment/4/node = SubResource( 9 )
nodes/fragment/4/position = Vector2( 0, 420 )
nodes/fragment/5/node = SubResource( 10 )
nodes/fragment/5/position = Vector2( 200, 420 )
nodes/fragment/7/node = SubResource( 11 )
nodes/fragment/7/position = Vector2( 200, 160 )
nodes/fragment/8/node = SubResource( 12 )
nodes/fragment/8/position = Vector2( 400, 340 )
nodes/fragment/10/node = SubResource( 2 )
nodes/fragment/10/position = Vector2( 600, 340 )
nodes/fragment/13/node = SubResource( 5 )
nodes/fragment/13/position = Vector2( 840, 340 )
nodes/fragment/14/node = SubResource( 6 )
nodes/fragment/14/position = Vector2( 600, 580 )
nodes/fragment/19/node = SubResource( 19 )
nodes/fragment/19/position = Vector2( -200, 420 )
nodes/fragment/21/node = SubResource( 20 )
nodes/fragment/21/position = Vector2( 800, 100 )
nodes/fragment/connections = PoolIntArray( 4, 0, 5, 0, 2, 0, 7, 0, 7, 0, 8, 0, 8, 0, 10, 0, 14, 0, 13, 1, 19, 0, 4, 0, 10, 0, 13, 0, 5, 0, 8, 1, 21, 0, 0, 0, 13, 0, 0, 5 )

[resource]
shader = SubResource( 14 )
shader_param/ScalarInput = 0.0
